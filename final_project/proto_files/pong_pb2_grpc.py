# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import pong_pb2 as pong__pb2


class PongServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.paddle_stream = channel.unary_stream(
                '/pong.PongServer/paddle_stream',
                request_serializer=pong__pb2.PaddleRequest.SerializeToString,
                response_deserializer=pong__pb2.PaddlePosition.FromString,
                )
        self.ball_stream = channel.unary_stream(
                '/pong.PongServer/ball_stream',
                request_serializer=pong__pb2.PaddleRequest.SerializeToString,
                response_deserializer=pong__pb2.BallPosition.FromString,
                )
        self.move = channel.unary_unary(
                '/pong.PongServer/move',
                request_serializer=pong__pb2.PaddleMovement.SerializeToString,
                response_deserializer=pong__pb2.Empty.FromString,
                )
        self.initialize_game = channel.unary_stream(
                '/pong.PongServer/initialize_game',
                request_serializer=pong__pb2.UserName.SerializeToString,
                response_deserializer=pong__pb2.GameReady.FromString,
                )
        self.get_usernames = channel.unary_unary(
                '/pong.PongServer/get_usernames',
                request_serializer=pong__pb2.PlayerIdRequest.SerializeToString,
                response_deserializer=pong__pb2.UserNameMessage.FromString,
                )


class PongServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def paddle_stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ball_stream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def move(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initialize_game(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_usernames(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PongServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'paddle_stream': grpc.unary_stream_rpc_method_handler(
                    servicer.paddle_stream,
                    request_deserializer=pong__pb2.PaddleRequest.FromString,
                    response_serializer=pong__pb2.PaddlePosition.SerializeToString,
            ),
            'ball_stream': grpc.unary_stream_rpc_method_handler(
                    servicer.ball_stream,
                    request_deserializer=pong__pb2.PaddleRequest.FromString,
                    response_serializer=pong__pb2.BallPosition.SerializeToString,
            ),
            'move': grpc.unary_unary_rpc_method_handler(
                    servicer.move,
                    request_deserializer=pong__pb2.PaddleMovement.FromString,
                    response_serializer=pong__pb2.Empty.SerializeToString,
            ),
            'initialize_game': grpc.unary_stream_rpc_method_handler(
                    servicer.initialize_game,
                    request_deserializer=pong__pb2.UserName.FromString,
                    response_serializer=pong__pb2.GameReady.SerializeToString,
            ),
            'get_usernames': grpc.unary_unary_rpc_method_handler(
                    servicer.get_usernames,
                    request_deserializer=pong__pb2.PlayerIdRequest.FromString,
                    response_serializer=pong__pb2.UserNameMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pong.PongServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PongServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def paddle_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pong.PongServer/paddle_stream',
            pong__pb2.PaddleRequest.SerializeToString,
            pong__pb2.PaddlePosition.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ball_stream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pong.PongServer/ball_stream',
            pong__pb2.PaddleRequest.SerializeToString,
            pong__pb2.BallPosition.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def move(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pong.PongServer/move',
            pong__pb2.PaddleMovement.SerializeToString,
            pong__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def initialize_game(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/pong.PongServer/initialize_game',
            pong__pb2.UserName.SerializeToString,
            pong__pb2.GameReady.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_usernames(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pong.PongServer/get_usernames',
            pong__pb2.PlayerIdRequest.SerializeToString,
            pong__pb2.UserNameMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
