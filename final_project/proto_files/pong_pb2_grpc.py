# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import pong_pb2 as pong__pb2


class PongServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.BallStream = channel.unary_stream(
                '/grpc.PongServer/BallStream',
                request_serializer=pong__pb2.BallPosition.SerializeToString,
                response_deserializer=pong__pb2.BallPosition.FromString,
                )
        self.PaddleStream = channel.unary_stream(
                '/grpc.PongServer/PaddleStream',
                request_serializer=pong__pb2.PaddlePosition.SerializeToString,
                response_deserializer=pong__pb2.PaddlePosition.FromString,
                )
        self.initialize_player = channel.unary_unary(
                '/grpc.PongServer/initialize_player',
                request_serializer=pong__pb2.Empty.SerializeToString,
                response_deserializer=pong__pb2.Player.FromString,
                )
        self.update_score = channel.unary_unary(
                '/grpc.PongServer/update_score',
                request_serializer=pong__pb2.BallPosition.SerializeToString,
                response_deserializer=pong__pb2.Score.FromString,
                )


class PongServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def BallStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PaddleStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def initialize_player(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def update_score(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_PongServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'BallStream': grpc.unary_stream_rpc_method_handler(
                    servicer.BallStream,
                    request_deserializer=pong__pb2.BallPosition.FromString,
                    response_serializer=pong__pb2.BallPosition.SerializeToString,
            ),
            'PaddleStream': grpc.unary_stream_rpc_method_handler(
                    servicer.PaddleStream,
                    request_deserializer=pong__pb2.PaddlePosition.FromString,
                    response_serializer=pong__pb2.PaddlePosition.SerializeToString,
            ),
            'initialize_player': grpc.unary_unary_rpc_method_handler(
                    servicer.initialize_player,
                    request_deserializer=pong__pb2.Empty.FromString,
                    response_serializer=pong__pb2.Player.SerializeToString,
            ),
            'update_score': grpc.unary_unary_rpc_method_handler(
                    servicer.update_score,
                    request_deserializer=pong__pb2.BallPosition.FromString,
                    response_serializer=pong__pb2.Score.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.PongServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class PongServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def BallStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.PongServer/BallStream',
            pong__pb2.BallPosition.SerializeToString,
            pong__pb2.BallPosition.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PaddleStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.PongServer/PaddleStream',
            pong__pb2.PaddlePosition.SerializeToString,
            pong__pb2.PaddlePosition.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def initialize_player(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.PongServer/initialize_player',
            pong__pb2.Empty.SerializeToString,
            pong__pb2.Player.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def update_score(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.PongServer/update_score',
            pong__pb2.BallPosition.SerializeToString,
            pong__pb2.Score.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
